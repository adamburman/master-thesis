component ParallelAssemblyType1
    % ParallelAssemblyType1:2
    % Parallel Assembly Block
    %    Model resolution: Detailed
    %    Number of cells: 2
    %
    %
    %    Inter-cell heat transfer: on
    %    Inter-cell radiation heat transfer: on
    %    Number of inter-cell thermal connections: 1
    %
    %    MATLAB version: 23.2
    %    Simscape Battery version: 23.2
    %    Simscape code generated on: 21-Mar-2024 13:53:57

    parameters
        SOC_vecCell = {[0, .1, .25, .5, .75, .9, 1],'1'}; % Vector of state-of-charge values, SOC
        V0_vecCell = {[3.5057, 3.566, 3.6337, 3.7127, 3.9259, 4.0777, 4.1928],'V'}; % Open-circuit voltage, V0(SOC)
        V_rangeCell = {[0, inf],'V'}; % Terminal voltage operating range [Min Max]
        R0_vecCell = {[.0085, .0085, .0087, .0082, .0083, .0085, .0085],'Ohm'}; % Terminal resistance, R0(SOC)
        AHCell = {27,'A*hr'}; % Cell capacity, AH
        extrapolation_optionCell = {simscape.enum.extrapolation.nearest,'1'}; % Extrapolation method for all tables
        thermal_massCell = {100,'J/K'}; % Thermal mass
        CoolantResistance = {1.2,'K/W'}; % Cell level coolant thermal path resistance
        AmbientResistance = {25,'K/W'}; % Cell level ambient thermal path resistance
        InterCellThermalResistance = {1,'K/W'}; % Inter-cell thermal path resistance
        InterCellRadiationArea = {1e-3,'m^2'}; % Inter-cell radiation heat transfer area
        InterCellRadiationCoefficient = {1e-6,'W/(K^4*m^2)'}; % Inter-cell radiation heat transfer coefficient
    end

    parameters(ExternalAccess=none)
        P = 2; % Batteries in Parallel
        NumInterCellThermalConnections = 1; % Number of inter-cell thermal connections
        InterCellConnectionsMapping = [1;2]; % Cell model to neighbors mapping
    end

    parameters(Access=private)
        CoolantResistanceScaled = CoolantResistance .* ones(1,P); % Scaled cell level coolant thermal path resistance
        AmbientResistanceScaled = AmbientResistance .* ones(1,P); % Scaled cell level ambient thermal path resistance
        InterCellThermalResistanceScaled = InterCellThermalResistance .* ones(1,NumInterCellThermalConnections); % Scaled inter-cell thermal path resistance
        InterCellRadiationAreaScaled = InterCellRadiationArea .* ones(1,NumInterCellThermalConnections); % Scaled inter-cell radiation heat transfer area
        InterCellRadiationCoefficientScaled = InterCellRadiationCoefficient .* ones(1,NumInterCellThermalConnections); % Scaled inter-cell radiation heat transfer coefficient
    end

    nodes
        p = foundation.electrical.electrical; % +
        n = foundation.electrical.electrical; % -
        ClntH = foundation.thermal.thermal; % ClntH
        AmbH = foundation.thermal.thermal; % AmbH
    end

    variables
        iCell = {repmat(0,2,1),'A'}; % Cell current (positive in)
        vCell = {repmat(0,2,1),'V'}; % Cell terminal voltage
        socCell = {value={repmat(1,2,1),'1'},priority=priority.high}; % Cell state of charge
        numCyclesCell = {value={repmat(0,2,1),'1'},priority=priority.high}; % Cell discharge cycles
        temperatureCell = {value={repmat(298.15,2,1),'K'},priority=priority.high}; % Cell temperature
        vParallelAssembly = {value={0,'V'},priority=priority.none}; % Parallel Assembly Voltage
        socParallelAssembly = {value={1,'1'},priority=priority.none}; % Parallel Assembly state of charge
    end

    equations
        assert(length(iCell) == P);
        assert(length(vCell) == P);
        assert(length(socCell) == P);
        assert(length(numCyclesCell) == P);
        assert(length(temperatureCell) == P);
        assert(length(vParallelAssembly) == 1);
        assert(length(socParallelAssembly) == 1);
        assert(isequal(size(CoolantResistance),[1,1]) || isequal(size(CoolantResistance),[1,P]),...
            'Cell level coolant thermal path resistance must be either a scalar or a row vector. The size of this vector must be equal to the number of cells modeled by the block');
        assert(isequal(size(AmbientResistance),[1,1]) || isequal(size(AmbientResistance),[1,P]),...
            'Cell level ambient thermal path resistance must be either a scalar or a row vector. The size of this vector must be equal to the number of cells modeled by the block');
        assert(isequal(size(InterCellThermalResistance),[1,1]) || isequal(size(InterCellThermalResistance),[1,NumInterCellThermalConnections]),...
            'Inter-cell thermal path resistance must be either a scalar or a row vector. The size of this vector must be equal to the number of inter-cell thermal connections modeled by the block');
        assert(isequal(size(InterCellRadiationArea),[1,1]) || isequal(size(InterCellRadiationArea),[1,NumInterCellThermalConnections]),...
            'Inter-cell radiation heat transfer area must be either a scalar or a row vector. The size of this vector must be equal to the number of inter-cell thermal connections modeled by the block');
        assert(isequal(size(InterCellRadiationCoefficient),[1,1]) || isequal(size(InterCellRadiationCoefficient),[1,NumInterCellThermalConnections]),...
            'Inter-cell radiation heat transfer coefficient must be either a scalar or a row vector. The size of this vector must be equal to the number of inter-cell thermal connections modeled by the block');
        vParallelAssembly == Cell1(1).p.v - Cell1(1).n.v;
        socParallelAssembly == sum([Cell1.stateOfCharge])/P;
    end

    annotations
        [p] : Side=top;
        [n] : Side=bottom;
        [InterCellH] : Side=bottom;
        [InterCellRadiativeH] : Side=bottom;
        UILayout = [UIGroup("Main",SOC_vecCell,V0_vecCell,V_rangeCell,R0_vecCell,AHCell,extrapolation_optionCell),...
            UIGroup("Thermal",thermal_massCell,CoolantResistance,AmbientResistance,InterCellThermalResistance,InterCellRadiationArea,InterCellRadiationCoefficient)];
        Icon = 'parallelAssembly.svg';
    end

    for Pidx = 1:P
        components(ExternalAccess=observe,CompileReuse=true)
            Cell1(Pidx) = batteryecm.table_battery(SOC_vec = SOC_vecCell,...
                V0_vec = V0_vecCell,V_range = V_rangeCell,R0_vec = R0_vecCell,AH = AHCell,...
                extrapolation_option = extrapolation_optionCell,thermal_mass = thermal_massCell,...
                T_dependence = simscape.enum.tablebattery.temperature_dependence.no,...
                prm_age_OCV = simscape.enum.tablebattery.prm_age_OCV.OCV,...
                prm_age_capacity = simscape.enum.tablebattery.prm_age.disabled,...
                prm_age_modeling = simscape.enum.tablebattery.prm_age_modeling.equation,...
                prm_age_resistance = simscape.enum.tablebattery.prm_age.disabled,...
                prm_dir = simscape.enum.tablebattery.prm_dir.noCurrentDirectionality,...
                prm_dyn = simscape.enum.tablebattery.prm_dyn.off,prm_fade = simscape.enum.tablebattery.prm_fade.disabled,...
                prm_leak = simscape.enum.tablebattery.prm_leak.disabled,...
                thermal_port = simscape.enum.thermaleffects.model,i.priority = priority.none,...
                v.priority = priority.none,stateOfCharge.priority = priority.none,...
                num_cycles.priority = priority.none,cell_temperature.priority = priority.none);
        end
    end

    for Pidx = 1:P
        connections
            connect(p,Cell1(Pidx).p);
            connect(Cell1(Pidx).n,n);
        end
    end

    for Pidx = 1:P
        equations
            Cell1(Pidx).i == iCell(Pidx);
            Cell1(Pidx).v == vCell(Pidx);
            Cell1(Pidx).stateOfCharge == socCell(Pidx);
            Cell1(Pidx).num_cycles == numCyclesCell(Pidx);
            Cell1(Pidx).cell_temperature == temperatureCell(Pidx);
        end
    end

    for Pidx = 1:P
        components(ExternalAccess=observe)
            CoolantResistor(Pidx) = foundation.thermal.elements.resistance(resistance = CoolantResistanceScaled(Pidx));
        end

        connections
            connect(Cell1(Pidx).H,CoolantResistor(Pidx).A);
            connect(CoolantResistor(Pidx).B,ClntH);
        end
    end

    for Pidx = 1:P
        components(ExternalAccess=observe)
            AmbientResistor(Pidx) = foundation.thermal.elements.resistance(resistance = AmbientResistanceScaled(Pidx));
        end

        connections
            connect(Cell1(Pidx).H,AmbientResistor(Pidx).A);
            connect(AmbientResistor(Pidx).B,AmbH);
        end
    end

    for InterCellThermalResistorsIdx = 1:NumInterCellThermalConnections
        connections
            connect(Cell1(InterCellConnectionsMapping(1,InterCellThermalResistorsIdx)).H,InterCellThermalResistor(InterCellThermalResistorsIdx).A);
            connect(InterCellThermalResistor(InterCellThermalResistorsIdx).B,Cell1(InterCellConnectionsMapping(2,InterCellThermalResistorsIdx)).H);
        end
    end

    for InterCellThermalResistorsIdx = 1:NumInterCellThermalConnections
        components(ExternalAccess=observe)
            InterCellThermalResistor(InterCellThermalResistorsIdx) = foundation.thermal.elements.resistance(...
                resistance = InterCellThermalResistanceScaled(InterCellThermalResistorsIdx));
        end
    end

    for Pidx = 1:P
        nodes
            InterCellH(Pidx) = foundation.thermal.thermal; % ICH
        end
    end

    for Pidx = 1:P
        connections
            connect(Cell1(Pidx).H,InterCellH(Pidx));
        end
    end

    for InterCellRadiativeHeatTransferIdx = 1:NumInterCellThermalConnections
        connections
            connect(Cell1(InterCellConnectionsMapping(1,InterCellRadiativeHeatTransferIdx)).H,InterCellRadiativeHeatTransfer(InterCellRadiativeHeatTransferIdx).A);
            connect(InterCellRadiativeHeatTransfer(InterCellRadiativeHeatTransferIdx).B,Cell1(InterCellConnectionsMapping(2,InterCellRadiativeHeatTransferIdx)).H);
        end
    end

    for InterCellRadiativeHeatTransferIdx = 1:NumInterCellThermalConnections
        components(ExternalAccess=observe)
            InterCellRadiativeHeatTransfer(InterCellRadiativeHeatTransferIdx) = foundation.thermal.elements.radiation(...
                area = InterCellRadiationAreaScaled(InterCellRadiativeHeatTransferIdx),...
                rad_tr_coeff = InterCellRadiationCoefficientScaled(InterCellRadiativeHeatTransferIdx));
        end
    end

    for Pidx = 1:P
        nodes
            InterCellRadiativeH(Pidx) = foundation.thermal.thermal; % ICRH
        end
    end

    for Pidx = 1:P
        connections
            connect(Cell1(Pidx).H,InterCellRadiativeH(Pidx));
        end
    end
end